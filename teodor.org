#+title: Teodor

* 2023-03-28
** notater
Oddmund, Lars og Richards mikroblogg

1. Hva gj칮r du akkurat n친?
2. Finner du kvalitet i det?
3. Hvorfor / hvorfor ikke?

Olorm.iterate.no

#+begin_src
Bb tui
git pul l --rebase
FZF for 친 velge builder
$EDITOR
Save
Git commit og push
#+end_src

#olorm p친 Slack
Teodor f칮lger opp manuelt i starten, backup fra Magnus (?)
** retro
funka det!

- Var nok jobb i 친 ta CLI-biten.
- Og ignorerer st칮tte for flere input-formater for n친.
- Mulig IKI-gjenbruk her er ... lite / optimistisk.
* 2023-03-30
** prat med Lars
1. lars sa han var villig til 친 pr칮ve en uke
2. tirsdag eller onsdag etter lunsj etter p친ske fungerte sannsynligvis bra for lars

Ikke h칮rt med Oddmund og Richard enn친.
H친per vi kan finne et tidspunkt der alle kan v칝re p친 kontoret.
* 2023-04-16
** 칀hh, kjempeforn칮yd med =olorm.lib=!!!
Dette synes jeg begynner 친 bli skikkelig bra.
** Og =clerk= og =babashka/fs=!
仇벒잺
** meeeen
Jeg har hardkodet meg inn i at URL til OLORM-er skal v칝re

#+begin_src
/p/$OLORM
#+end_src

ooog n친 vil jeg ha

#+begin_src
/o/$OLORM
#+end_src

, selvf칮lgelig.
*** men meen
jeg kan jo bare fikse routeren, og la filene ligge?

hmm.
*** Jepp, vi gj칮r det s친nn
* 2023-05-14
** status
1. jals starter tirsdag
2. dagens arkitektur er laget for at OLORM er verkt칮yet, plattformen og kohorten
3. jeg vil ha:
   1. 칠n plattform (mikrobloggeriet)
   2. CLI per kohort
   3. forskjellige kohorter.

Skisse:

- =mikrobloggeriet.api= - kjernelogikk.
  - =client= -- hvilken mappe, etc.
  - =document= -- en olorm, en jals, etc.
- =mikrobloggeriet.olorm.cli= - OLORM CLI
  - bruker =mirkobloggeriet.api=
- =mikrobloggeriet.jals.cli=
  - bruker =mikrobloggeriet.api

Plan:

1. Skriv =mikrobloggeriet.api=
2. Pr칮v 친 migrere over =olorm.api= til 친 /bruke/ =mikrobloggeriet.api=.
   1. m친 hardkode inn en default API-klient for OLORM for 친 f친 det til 친 funke.
* 2023-05-15
** status
tror jeg kom fram til noe jeg liker i g친r.
To nye ting:

#+begin_src clojure
;; a cohort is a group of people who are writing together

:cohort/name "OLORM"                                  ;; user facing name (unique)
:cohort/ident :olorm                                  ;; identifier (unique)
:cohort/repo-subdir "o"                               ;; where cohort docs are on disk (unique)
:cohort/server-dir "o"                                ;; where cohort docs are on the server (unique)
:cohort/repo-path  "/home/teodorlu/dev/iterate/olorm" ;; where the repo is

;; a doc is a written thing
:doc/number 42       ;; document number, starts at 1
:doc/slug "olorm-42" ;; the documents slug is used on the URL. Globally unique
:doc/cohort :olorm   ;; refers to a cohort ident
#+end_src
** goals for today
Want to:

1. Land new abstraction that enables us to support multiple cohorts in a nice way
2. and must be prepared for the start of the new cohort tomorrow.
** step: document proposed data model in the right place
TODO
** status:
1. dokumentert ny m친te 친 installere p친.
   README er ish OK.
2. har f친tt et nytt modulhierarki jeg har tro p친.

mangler:

1. =mikrobloggeriet.olorm-cli= peker til den /gamle/ olorm-implementasjonen.
2. =mikrobloggeriet.jals-cli= lager olormer (all koden er kopiert)
** interlude
jeg har lyst til 친 endre navn fra =lib= til =domainlogic=.
** step: olorm peker til rett olorm-backend
1. [X] =mikrobloggeriet.olorm-cli= peker til den /gamle/ olorm-implementasjonen.
   1. fikset!
2. [ ] =mikrobloggeriet.jals-cli= lager olormer (all koden er kopiert)
* 2023-07-12
** Hvordan f친r jeg testet disse greiene?
Det hadde v칝rt fint med CI.

1. Splitte koden i logikk som kan testes og kj칮ring av effekter
2. Skriv tester p친 logikken
3. G친 i prod med mindre usikkerhet.

Gj칮r det lettere 친 refaktorere, lettere 친 vite at jeg ikke brekker ting.

Lettere 친 refaktorere er kanskje hovedfordelen.
游뱂
*** Eksempel: sjekke hva slags git-kommandoer som har blitt kj칮rt i forskjellige varianter kommandoer
=--no-git= og =--no-edit=
